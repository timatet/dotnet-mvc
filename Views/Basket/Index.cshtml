@model dotnet_mvc.Models.HelpModels.BasketProductListModel

@{
    ViewData["Title"] = "Корзина";
}

@using Newtonsoft.Json

<h1>@ViewData["Title"]</h1>

@if (Model.productList.Count() == 0) {
    <div class="alert alert-primary" role="alert">
        Вы еще не добавили ни одного товара в корзину. <br>
        В нашем магазине <b>@ViewBag.ProductCountInShop @GetWordInCount(ViewBag.ProductCountInShop, "товар", "товара", "товаров")</b>, мы точно уверены, что хоть один подойдёт вам.
    </div>
} else {
    <div class="block-container flex-space-between">
        <div class="flex-left">
            
        </div>
        <div class="flex-right">
            <a class="btn btn-outline-primary" style="margin-right: 2.5px;">
                <i class="bi bi-filetype-pdf"></i>
                Скачать
            </a>
            <a class="btn btn-outline-primary" style="margin-right: 2.5px; margin-left: 2.5px;">
                <i class="bi bi-envelope-at"></i>
                Отправить на почту
            </a>
            <a class="btn btn-outline-primary" style="margin-left: 2.5px;">
                <i class="bi bi-cart-dash"></i>
                Очистить
            </a>
        </div>
    </div>

    <div class="block-container row">
        <table class="table">
            <thead>
                <tr style="color: #7f7f7f; font-size: .9375rem;">
                    <th scope="col" colspan="2">
                        @Model.productList.Count() @GetWordInCount(Model.productList.Count(), "товар", "товара", "товаров")
                    </th>
                    <th scope="col">Размер</th>
                    <th scope="col">Цвет</th>
                    <th scope="col">Количество</th>
                    <th scope="col">Стоимость</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model.productList)
                {
                    <tr style="text-align: left; vertical-align: middle;" class="Inter-Medium">
                        <td style="text-align: center;" >
                            <img src='@Url.Content("~/images/")@product.Key.ImageUrl' class="img-circle" 
                                width="64px" style="aspect-ratio: 1/1;" alt="...">
                        </td>
                        <td>
                            @product.Key.Name
                        </td>
                        <td>
                            @product.Key.ProductCharacteristic.Size
                        </td>
                        <td>
                            @product.Key.ProductCharacteristic.Color
                        </td>
                        <td>
                            <input class="input-custom" type="number" step="1" min="1" max="100" 
                                value="@product.Value" id="age" name="age" 
                                onkeypress="return isNumberKey(event)" 
                                onchange="changeCount(event, @JsonConvert.SerializeObject(product.Key))"/>
                            &nbsp;&nbsp;
                            @GetWordInCount(@product.Value, "штука", "штуки", "штук")
                        </td>
                        <td style="font-size: large;">
                            <span id="productCost-@product.Key.Id">@GetCost(@product.Key.Cost, @product.Value)</span>  ₽
                        </td>
                        <td>
                            <a type="button" onclick="removeItemFromBasket(@JsonConvert.SerializeObject(product.Key));">
                                <svg data-v-4f20fabd="" height="22px" viewBox="0 0 26 26" width="22px" xmlns="http://www.w3.org/2000/svg">
                                    <g data-v-4f20fabd="" fill="none" fill-rule="evenodd" stroke="#d2d2d2" stroke-linecap="square" stroke-width="3">
                                        <path data-v-4f20fabd="" d="M2.874 2.973l20.59 20.59M22.874 2.973L2.676 23.563" />
                                    </g>
                                </svg>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="block-container">
        <div class="flex-space-between" style="margin-bottom: 10px; margin-top: 10px;">
            <div class="flex-left">
            
            </div>
            <div class="flex-right">
                <div class="flex-space-between" style="width: 350px;">
                    <div class="flex-left">
                        <span class="Inter-Regular">
                            К оплате
                        </span>
                    </div>
                    <div class="flex-right" style="min-width: 75%;">
                        <h2 class="Inter-Medium">
                            <span id="totalCost">
                            </span>
                            &nbsp;₽
                        </h2>
                    </div>              
                </div>
            </div>
        </div>
        <div class="flex-space-between">
            <div class="flex-left">
            
            </div>
            <div class="flex-right">
                <a class="btn btn-primary btn-lg" style="margin-left: 2.5px;">
                    <i class="bi bi-cash-coin"></i>
                    Перейти к оформлению
                </a>
            </div>
        </div>
    </div>
}

<script>

    function removeItemFromBasket(product) {
        axios.post('/Basket/RemoveItemFromBasket', {
            product_id: product.Id
        })
        .then(function (response) {
            if (response.data == true) {
                window.location.reload();
            } else {
                toastr.error('', 'Ошибка');
            }
        })
        .catch(function (error) {
            console.log(error);
        });
    }

    window.onload = function() {
        changeTotalCost();
    };

    function changeTotalCost() {
        axios.get('/Basket/GetBasketTotalCost', { })
        .then(function (response) {
            if (response.data || response.data == 0) {
                document.getElementById("totalCost").textContent = response.data;
            } else {
                toastr.error('', 'Ошибка');
            }
        })
        .catch(function (error) {
            console.log(error);
        });  
    }

    async function changeCount(e, product) {

        if (e.target.value == '' || parseInt(e.target.value, 10) == 0) {
            e.target.value = 1
        } else if (parseInt(e.target.value, 10) > parseInt(e.target.max, 10)) {
            e.target.value = e.target.max
        }

        await axios.post('/Basket/ChangeProductCount', {
            product_id: product.Id,
            product_count: e.target.value
        })
        .then(function (response) {
            if (response.data == true) {
                document.getElementById("productCost-" + product.Id).textContent = e.target.value * product.Cost;
            } else {
                //console.log(response)
                toastr.error('', 'Ошибка');
            }
        })
        .catch(function (error) {
            console.log(error);
        });

        await changeTotalCost();   
    
    }

    function isNumberKey(e) {
        var charCode = (e.which) ? e.which : e.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

</script>

@functions {

    public string GetCost(double cost, int count) {
        return (cost * count).ToString();
    }

    public string GetWordInCount(
        int count, 
        string one, 
        string two, 
        string five
    ){
        var n = Math.Abs(count);

        n %= 100;
        if (n >= 5 && n <= 20) {
            return five;
        }

        n %= 10;
        if (n == 1) {
            return one;
        }

        if (n >= 2 && n <= 4) {
            return two;
        }

        return five;
    }

}