@model dotnet_mvc.Models.HelpModels.ProductListModel;

@{
    ViewData["Title"] = "Home Page";
}

@using Microsoft.AspNetCore.Identity
@inject SignInManager<dotnet_mvc.Models.DataModels.UserModel>  SignInManager
@inject UserManager<dotnet_mvc.Models.DataModels.UserModel>  UserManager

@using Newtonsoft.Json

<div class="text-center">
    <div class="alert alert-primary" role="alert">
        Данный сайт не осуществляет никаких продаж! Используется исключительно в учебных целях - 
        тренировка использования платформы .NET для разработки веб приложений. Любой размещенный 
        материал используется исключительно в некоммерческих целях. Исходный код размещен в репозитории
        https://github.com/timatet/dotnet-mvc
    </div>

    <div class="block-container flex-space-between">
        <div class="flex-left">
            @{
                if (SignInManager.IsSignedIn(User) && @UserManager.GetUserAsync(User).Result.IsAdmin)
                {  
                    <a asp-controller="Product" asp-action="New" class="btn btn-outline-primary">
                        <i class="bi bi-folder-plus"></i>
                        Добавить товар
                    </a>
                }
            }
        </div>
        <div class="flex-right">
            <a class="btn btn-outline-primary" style="margin-right: 2.5px;"
                onclick="showHideFilters();" id="openCloseFilterButton">
                <i class="bi bi-funnel"></i>
                Фильтры
            </a>
            <a asp-controller="Basket" asp-action="Index" 
                class="btn btn-outline-primary position-relative" style="margin-left: 2.5px;">
                <i class="bi bi-basket"></i>
                Корзина
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                    id="_totalProductCount" hidden="@ViewBag.TotalProductHidden">
                    <span id="totalProductCount">@ViewBag.TotalProduct</span>
                </span>
            </a>
        </div>
    </div>

    <div class="block-container row" id="filters" onchange="validFilterParameters();" hidden="@ViewBag.filterHidden">
        <div class="flex-left">
            <h2 class="Inter-SemiBold">Фильтры:</h2>
        </div>

        <div class="col-2">
            <label for="filterBrandSelect" class="form-label flex-left">Бренд:</label>
            <select asp-items="@ViewBag.BrandList" id="filterBrandSelect"
                class="form-select" aria-label="Default select example">
                <option value="-1" selected>Не выбран</option>
            </select>
        </div>
        <div class="col-2">
            <label for="filterCharacteristicSelect" class="form-label flex-left">Параметр:</label>
            <select asp-items="@ViewBag.CharacteristicList" id="filterCharacteristicSelect"
                class="form-select" aria-label="Default select example">
                <option value="NoSelect" selected>Не выбран</option>
            </select>
        </div>
        <div class="col-2 position-relative">
            <label for="filterCharacteristicName" class="form-label flex-left">Значение</label>
            <input type="text" class="form-control" disabled="@ViewBag.CharacteristicDisabled" value="@ViewBag.CharacteristicName"
                id="filterCharacteristicName" placeholder="...">
            <div class="invalid-tooltip">
                Не оставляйте это поле пустым при выбранном параметре!
            </div>
        </div>
        <div class="col-2">
            <label for="filterCategoriesSelect" class="form-label flex-left">Катергория:</label>
            <select asp-items="@ViewBag.CategoriesList" id="filterCategoriesSelect" 
                class="form-select" aria-label="Default select example">
                <option value="NoSelect" selected>Не выбран</option>
            </select>
        </div>
        <div class="col-4">
            <label for="filterButton" class="form-label flex-left">&nbsp;</label>
            <div class="flex-right" id="filterButton">
                <a class="btn btn-outline-primary" style="margin-right: 2.5px;"
                    onclick="makeFilter();">
                    <i class="bi bi-sliders"></i>
                    Применить
                </a>
                <a class="btn btn-outline-secondary" style="margin-left: 2.5px;"
                    asp-action="Index" asp-controller="Home">
                    <i class="bi bi-stars"></i>
                    Сбросить
                </a>
            </div>

            <!--<a href="#" class="btn btn-outline-primary btn-circle" style="padding: 0; height: 30px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" 
                    fill="currentColor" class="bi bi-filter-circle" aria-label="Применить"
                    viewBox="0 0 16 16" style="padding: 0; margin-top: 1.2px; margin-left: 0.5px;">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
                    <path d="M7 11.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"></path>
                </svg>
            </a>-->
        </div>
    </div>

    @if (Model.productList.Count() == 0)
    {
        <div class="alert alert-warning" role="alert">
            В данный момент в магазине отсутствуют товары. Приходите позже :)
        </div>
    } else 
    {
        <div class="block-container row">
            @foreach (var productModel in Model.productList)
            {
                <div class="col-md-3 col-sm-4">
                    <div class="card in-card">
                        @if (productModel.ImageUrl == null || productModel.ImageUrl == "" ||
                            !System.IO.File.Exists(ViewBag.WebRootPath + "/images/" + productModel.ImageUrl)) {
                            <img src='@Url.Content("~/images/")default.svg' class="card-img-top" 
                                style="aspect-ratio: 1/1;" alt="...">
                        } else {
                            <img src='@Url.Content("~/images/")@productModel.ImageUrl' class="card-img-top" 
                            style="aspect-ratio: 1/1;" alt="...">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@productModel.Name</h5>
                            <p class="card-text">
                                <span class="text-strip">
                                    @productModel.Description
                                </span>
                            </p>
                            <div class="flex-space-between">
                                <a asp-action="Info" asp-controller="Product" asp-route-id="@productModel.Id"
                                    role="button" class="btn btn-primary">
                                    <i class="bi bi-eye"></i>
                                    Открыть
                                </a>
                                <button class="btn btn-primary" onclick="addProductToBasket(@(JsonConvert.SerializeObject(productModel)));">
                                    <i class="bi bi-cart-plus"></i>
                                    В корзину
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@* Добавление в корзину *@
<div class="modal fade" id="addProductToBasketModal" data-bs-backdrop="static" 
    data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Товар добавлен в корзину</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
      </div>
      <div class="modal-body">
        <h2 class="Inter-ExtraBold" id="_modalProductName"></h2>
        <p id="_modalProductdescription"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Остаться на странице</button>
        <a asp-action="Index" asp-controller="Basket" type="button" class="btn btn-outline-primary">Перейти в корзину</a>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script type="text/javascript">

    async function getBasketProductCount() {
        await axios.get('/Basket/GetBasketProductCount', { })
        .then(function (response) {
            if (response.data) {
                if (document.getElementById("_totalProductCount").hidden) {
                    document.getElementById("_totalProductCount").hidden = false;
                }
                
                document.getElementById("totalProductCount").textContent = response.data;
            } else {
                toastr.error('', 'Ошибка');
            }
        })
        .catch(function (error) {
            console.log(error);
        }); 
    } 

    checkHashAfterRedirect();

    function addProductToBasket(product) {
        axios.post('/Basket/AddProductToBasket', {
            product_id: product.Id
        })
        .then(function (response) {
            if (response.data == true) {
                toastr.success('Продукт был добавлен в корзину.', 'Успех');

                document.getElementById("_modalProductName").innerHTML = product.Name;
                document.getElementById("_modalProductdescription").innerHTML = product.Description;

                getBasketProductCount();

                var addProductToBasketModal = new bootstrap.Modal(document.getElementById('addProductToBasketModal'));
                addProductToBasketModal.show();
            } else {
                toastr.error('Продукт не был добавлен в корзину.', 'Ошибка');
            }
        })
        .catch(function (error) {
            console.log(error);
        });
    }
    
    function checkHashAfterRedirect() {
        var windowHash = window.location.hash;
        if (windowHash === '#successDelete') {
            toastr.success('Продукт был успешно удален.', 'Успех');
        } else if (windowHash === '#errorDelete') {
            toastr.error('При удалении произошла какая-то ошибка.', 'Ошибка');
        }

        removeHash();
    }

    function removeHash () { 
        history.pushState("", document.title, window.location.pathname + window.location.search);
    }

    function showHideFilters () {
        var filters = document.getElementById("filters");
        var openCloseFilterButton = document.getElementById("openCloseFilterButton");
        if (filters.hidden == true) {
            filters.hidden = false;
            openCloseFilterButton.classList.add("btn-warning");
            openCloseFilterButton.classList.remove("btn-outline-primary");
        } else {
            filters.hidden = true;
            openCloseFilterButton.classList.add("btn-outline-primary");
            openCloseFilterButton.classList.remove("btn-warning");
        }
    }

    function validFilterParameters () {
        // Проверка корректности заполнения параметра
        var filterCharacteristicName = document.getElementById("filterCharacteristicName");
        if (document.getElementById("filterCharacteristicSelect").value !== 'NoSelect' &&
            (filterCharacteristicName.value == null 
                || filterCharacteristicName.value == undefined 
                || filterCharacteristicName.value == "")) {

            filterCharacteristicName.classList.add("is-invalid");
            filterCharacteristicName.disabled = false;
            return false;
        } else {
            filterCharacteristicName.classList.remove("is-invalid");

            if (document.getElementById("filterCharacteristicSelect").value === 'NoSelect') {
                filterCharacteristicName.value = "";
                filterCharacteristicName.disabled = true;
            }

            return true;
        }
    }
    
    function makeFilter () {
        if (!validFilterParameters ()) {
            return;
        }

        var filterBrandSelectId = document.getElementById("filterBrandSelect").value;
        var filterCharacteristicSelect = document.getElementById("filterCharacteristicSelect").value;
        var filterCharacteristicName = document.getElementById("filterCharacteristicName").value;
        var filterCategoriesSelect = document.getElementById("filterCategoriesSelect").value;

        url = "/Home?";
        if (filterBrandSelectId != -1) url += "&filterBrandSelectId=" + filterBrandSelectId;
        if (filterCharacteristicSelect !== "NoSelect") url += "&filterCharacteristicSelect=" + filterCharacteristicSelect;
        if (filterCharacteristicName !== "" && filterCharacteristicName != undefined && filterCharacteristicName != null) 
            url += "&filterCharacteristicName=" + filterCharacteristicName;
        if (filterCategoriesSelect !== "NoSelect") url += "&filterCategoriesSelect=" + filterCategoriesSelect;

        window.location.replace(url);
    }
  </script>
}
